/* Підключення шрифтів */
@import url("fonts.css");

/* Скидання стилів */
@import url("reset.css");

/* Основні стилі */
body {
	background-color: #333;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	color: #fff;
}
.wrapper {
	min-height: 100%;
	overflow: clip;

	padding: 50px;
}

.block {
	width: 200px;
	height: 200px;
	background-color: rgba(255, 255, 255, 0.1);
}

.block__item {
	width: 200px;
	height: 200px;
	background-color: #7a956b;
	padding: 10px;
}

/*
За допомогою 2D та 3D трансформації 
ми зможемо зрушувати, повертати, масштабувати 
елементи та робити багато іншого!
Задається трансформація властивістю
transform та її значеннями

transform: функція(ї)-значення властивості;

При вказанні відсоткових значень, 
відсоток вираховується від розмірів самого об'єкту
x - від ширини, y - від висоти

При використанні transform, об'єкт стає ближче (вище)
по осі z. Тобто накриє собою інші об'єкти без влатстивості 
transform та position. Стає на передній план. 
Але керувати об'єктами за допомогою z-index ми не можемо

!!!!! НЕ ПРАЦЮЄ з рядковими об'єктами !!!!!!!!
*/

/*
translate (x, y)
Зміщує елемент на нове місце,
переміщаючи відносно початкового 
положення об'єкта вправо та вниз,
використовуючи координати X та Y. 
Записується так translate (x,y).
*/

.block__item {
	/* 
	transform: translate(20px, 30px); 
	transform: translate(10%, 10%); 
	*/
	/*
	transform: translateX(20px);
	transform: translateY(20px);
	*/
}

/* 
Різниця між 
margin 
position: relative 
transform: translate(x, y) 
*/
.dif {
	/*
	padding: 20px;
	background-color: #77608d;
	*/
	/*
	margin-top: -20px;
	position: relative;
	*/
	/*
	position: relative;
	left: 0;
	top: -20px;
	*/

	/* transform: translate(0, -20px); */
}

/*  
Scale (x, y)
Масштабує елементи,
роблячи їх більшими або меншими.
1 - це початковий розмір об'єкту
*/

.block__item {
	/* transform: scale(1); */
	/* transform: scale(0.1); */
	/* transform: scale(0.5,0.8); */
	/* transform: scale(2); */

	/* Дзеркало */
	/* transform: scale(-1, 1); */
}
/*
.block:hover .block__item {
	transform: scale(0.2);
}
*/
/*
.block__item:hover {
	transform: scale(2);
}
*/

/*   
Rotate (n + deg)
Повертає елементи.
*/

.block__item {
	/* transform: rotate(90deg); */
}

.block__item:hover {
	/* transform: rotate(-20deg); */
}

/* 
Skew (x + deg, y + deg)
Деформує (нахиляє) елементи.
*/

.block__item {
	/* transform: skew(10deg); */
	/* transform: skew(-10deg, 30deg); */
	/* 
	transform: skewX();
	transform: skewY();
	 */
}
/*
.skew {
	font-size: 20px;
	padding: 20px;
	position: relative;
}
.skew span {
	position: relative;
}
.skew::before {
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	background-color: #77608d;
	transform: skew(-20deg, 0deg);
}
.skew:hover::before {
	transform: skew(20deg, 0deg);
}
*/

/* 
Matrix (a, c, b, d, x, y)
Дозволяє об'єднати кілька 
функцій 2D-трансформацій в одній.
*/

.block__item {
	/* transform: matrix(1, 2, 5, 1, 10, 50); */
}

/* 
Множинні 2D трансформації 
значення розділяються пробілом
*/

.block__item {
	/* transform: translate(20px, 20px) scale(0.5) rotate(-45deg) skew(-30deg); */
}

/*
Transform-origin
Дозволяє змістити центр трансформації,
щодо якого відбувається зміна 
положення/розміру/форми елемента.
transform-origin: 50% 50%;
transform-origin: 50%;
transform-origin: center;
*/

.block__item {
	/* transform: rotate(-50deg); */
	/* transform-origin: 0 0; */
	/* transform-origin: 10px 50px; */
}

/* 3D */

/*  
Perspective,
perspective-origin
Встановлення глибини та зміна 
точки початку координат.
!! Задаються батьківському елементу!
perspective-origin: center (за замовченням)
perspective - не можна вказати у відсотках
*/

.block3D {
	width: 200px;
	height: 200px;
	background-color: rgba(255, 255, 255, 0.1);

	perspective: 700px;
	perspective-origin: center; /* За замовченням */
}
.block3D__item {
	background-color: #77608d;
	width: 200px;
	height: 200px;
	padding: 10px;
}
/* Пояснення перспективи */
/* 
Значення властивості perspective вказує 
відстань від точки вказаної у perspective-origin (за замовченням сентр об'єкту)
до екрану.
І ефект перспективи (нахил, масштаб тощо) має вміститись у цю відстань.
*/

.block3D__item {
	transform: rotateX(55deg);
}

/* translate3D 
За аналогією зі своїм 2D братом,
це значення визначає переміщення елемента,
але в 3D-просторі. Крім осі X та Y 
додається вісь Z.
!! вісь Z працює лише з перспективою (perspective)
*/

.block3D__item {
	/* transform: translate3d(20px, 20px, -100px); */
}

/* scale3D */
.block3D__item {
	/* transform: scale3D(2, 2, 2); */
}

/* rotate3D (x,y,z,n+deg) */
.block3D__item {
	/* transform: rotate3d(10, 20, 20, 50deg); */
	/* transform: rotateY(10deg); */
	/* transform: rotate3d(50, 50, 200, 50deg); */
	/* transform: rotate3d(50, 0, 0, 30deg); */
}

/* matrix3d */

/* Multi3D */
.block3D__item {
	/* transform: translate3d(20px, 20px, 20px) rotate3d(1, 1, 1, 20deg); */
}

/*
Transform-style
Визначає, як дочірні елементи мають відображатися у 3D-просторі.
!!! Задається батьківському елементу разом з perspective!
transform-style: flat; - за замовченням
*/

.block3D {
	/* transform-style: flat; */
	/* transform-style: preserve-3d; */
}

.block3D__item {
	/* transition: all 0.9s; */
}
.block3D:hover .block3D__item {
	/* transform: rotateY(35deg); */
}

/*
Backface-visibility
Відображення зворотного боку об'єкта.

backface-visibility: visible; за замовченням

*/
.block3D__item {
	/* backface-visibility: hidden; */
}

/* Flipper */
.flip {
}
.flip__body {
	position: relative;
	width: 200px;
	height: 200px;
	perspective: 500px;
}
.flip__front,
.flip__back {
	position: absolute;
	width: 100%;
	height: 100%;
	left: 0;
	top: 0;
	transition: all 0.3s;
}
.flip__front {
	background-color: #77608d;
	transform: rotateY(0deg);

	backface-visibility: hidden;
}
.flip__back {
	background-color: #7a956b;
	transform: rotateY(-180deg);
}

.flip__body:hover .flip__back {
	transform: rotateY(0deg);
}
.flip__body:hover .flip__front {
	transform: rotateY(180deg);
}
